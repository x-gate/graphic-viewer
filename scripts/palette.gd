class_name Palette

var prefix: PackedColorArray = [
	Color.from_rgba8(0x00, 0x00, 0x00, 0x00),
	Color.from_rgba8(0x80, 0x00, 0x00),
	Color.from_rgba8(0x00, 0x80, 0x00),
	Color.from_rgba8(0x80, 0x80, 0x00),
	Color.from_rgba8(0x00, 0x00, 0x80),
	Color.from_rgba8(0x80, 0x00, 0x80),
	Color.from_rgba8(0x00, 0x80, 0x80),
	Color.from_rgba8(0xc0, 0xc0, 0xc0),
	Color.from_rgba8(0xc0, 0xdc, 0xc0),
	Color.from_rgba8(0xa6, 0xca, 0xf0),
	Color.from_rgba8(0xde, 0x00, 0x00),
	Color.from_rgba8(0xff, 0x5f, 0x00),
	Color.from_rgba8(0xff, 0xff, 0xa0),
	Color.from_rgba8(0x00, 0x5f, 0xd2),
	Color.from_rgba8(0x50, 0xd2, 0xff),
	Color.from_rgba8(0x28, 0xe1, 0x28),
]
var suffix: PackedColorArray = [
	Color.from_rgba8(0xf5, 0xc3, 0x96),
	Color.from_rgba8(0x1e, 0xa0, 0x5f),
	Color.from_rgba8(0xc3, 0x7d, 0x46),
	Color.from_rgba8(0x9b, 0x55, 0x1e),
	Color.from_rgba8(0x46, 0x41, 0x37),
	Color.from_rgba8(0x28, 0x23, 0x1e),
	Color.from_rgba8(0xff, 0xfb, 0xf0),
	Color.from_rgba8(0x3a, 0x6e, 0xa5),
	Color.from_rgba8(0x80, 0x80, 0x80),
	Color.from_rgba8(0xff, 0x00, 0x00),
	Color.from_rgba8(0x00, 0xff, 0x00),
	Color.from_rgba8(0xff, 0xff, 0x00),
	Color.from_rgba8(0x00, 0x00, 0xff),
	Color.from_rgba8(0xff, 0x80, 0xff),
	Color.from_rgba8(0x00, 0xff, 0xff),
	Color.from_rgba8(0xff, 0xff, 0xff),
]

static func build(data: PackedByteArray) -> PackedColorArray:
	var p = Palette.new()
	
	var ret: PackedColorArray = p.prefix
	for i in range(0, data.size(), 3):
		ret.push_back(Color.from_rgba8(data[i+2], data[i+1], data[i]))
	ret.append_array(p.suffix)
	
	return ret
